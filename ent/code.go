// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/rgst-io/jsonnet-playground/ent/code"
)

// Code is the model entity for the Code schema.
type Code struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Contents holds the value of the "contents" field.
	Contents string `json:"contents,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Code) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case code.FieldContents:
			values[i] = new(sql.NullString)
		case code.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Code", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Code fields.
func (c *Code) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case code.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case code.FieldContents:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contents", values[i])
			} else if value.Valid {
				c.Contents = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Code.
// Note that you need to call Code.Unwrap() before calling this method if this Code
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Code) Update() *CodeUpdateOne {
	return (&CodeClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the Code entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Code) Unwrap() *Code {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Code is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Code) String() string {
	var builder strings.Builder
	builder.WriteString("Code(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", contents=")
	builder.WriteString(c.Contents)
	builder.WriteByte(')')
	return builder.String()
}

// Codes is a parsable slice of Code.
type Codes []*Code

func (c Codes) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
